WorkFlow: (This is an Idea Dump too)
 + Phong Lighting Model( Write Sun class (Directional Light) )
 {
    To Put Simply Ambient->Diffuse-->Specular(ReQuires MATERIAL CLASS, This New Class Will Have Texture Data Insted Of Model,While Model is Having Material)
    Day 1 10-02-2021{
        Browsing Through Youtube While Wsating time.
        {brightness In Shader, Min Of Color passed out from frag Shader will be determined By Brightness controlled by ambient,diffuse,specular (Later will be dampened by shadow; FOG has different color so after dampning brightness, the color it will be faded/mixed by fog's-color)}
    }
    Day 6 15-02-2021{
        Found Extremly Idiotic Mistake, while generating Mesh I Was not passing Normals to mesh;
        Moving on to specular lighting.
    }
 }
 + Directional Shadows(Only)
===
 Learn animation in Blender to understand different animation types
===
 + Rigged Animation System i.e Animated Model class
 + Normal Animation System i.e Animated Model class(if possible)
 + SkyBox
 + Collider class(Collision System)[Oriented bounding Box like]
 + RigidBody class(Physics System)[Hitbox type]

Polishing Features(Some features or Changes Outside preffered Workflow):
 - camera.RollBy(degree){ roll = -degree;//reverse dirn (Maybe, Not Implimented For Now)
      (rotation.x ,rotation.y, -degrees) = rotation;
   }
 - Cull opposite facing triangles[Optimize]
 - Mipmapping of textures[Optimize & Improve to Visuals]
 - Limit/dampen Efects By Distance(Like specular light)[Optimize]
 - Take out Mesh and texture From Model AND resolve mesh & texture duplication in memory{may increase speed}[Optimize]
 - Sort Mesh and texture in memory{For Nxt Step, Can be Lot Harder, However Creating Link List May Help then create new Scene with Stacked static data chunks i.e *Point 3. Optional Polish*}[Optimize]
 - Sorting Can be Done EveryWhere.
 - Models Loading Mesh and texture will somtimes be same so Sort and process them in sorted order(and since model and texture are the main datas, all models can push this information(from scene renderer) to Master Renderer where it will create tuple of mesh and texture and other necessary stuff,sort them by Mesh -> texture,fed the data to OpenGL)[Optimize]
 - Change Script Component(just single func/behavior per script comp){Break Scripts to awake and update scripts(inside Scene)[to add multiple scripts on whim instead of just 1 reset and update]}
 - Store initial(when initialising Scene) Posn and settings of different components inside a stock script Of type awake{It can work as saving scenes}
 - Generalize Scene update and render functions{you know why}
 - map mesh to shader(){to both give user freedom of writing own shaders and to facilitate scene render func}
 - Extract game loop and every stuff out main function, Run rendering,collision and every stuff you can on different thread
 - Build Render Class to handle post render stuff like UIs, anti-aliasing
 - Scene camera
 - you can add camera model to represent 3d posn in scene and a 2d sprite(shown on UI like in unity irresepective of distance from camera) for camera posn w.r.t scene camera
 - Debug mode for scene where you can fly through World to check what is where, with its exclusive features like wireframe of colliders, visual details of game objs etc[create new Type of script class(Called Debug/Gizmo Script) for handling every extra detail to show about game objects{also this script is directly handled by debug system of renderer}, also there will be some default debug scripts like for camera, collider etc].

Optional Polish:
 - Continuous Collision
 - Seprate Terrain System
 - Create intermidiate stage after init where a new Scene is created on heap where everything is located in contineuous format(not in std::vector but array i.e contineous data blocks) then wipe the temp scene wherever possible to free immidiate cache.
   `*=> it can also slow down(since everything on RAM) so optimize that too. 😁

NOTE: this a stepping stone(that is i'm proud of) for understanding HAZEL/(General ECS based Engines) to core AND for Resume, So good luck to myself, focusing on gathering Knowledge not lazing around 👍