WorkFlow: (This is an Idea Dump too)
 + Directional Shadows(Only){                                                            /Z axis
    I'll be Postponing it for now, Slowlyworking On theory first.          .------------/---.                 ___________
                                                                          / \  yaxis   /   /|                /__________/|
                /\``````````````````````/\           C is Camera         /___;___|____;___/ /                |   y|/z  | |
               /  \                    /  \                              \    \  |   /   / /     ->          |  --O--x | | 
              /    \                  /    \                              \   /'-|--/---/-/                  |   /|    | |
             /      \                /      \                              \ /   | /   /.*                   |_________|/
            /________\_____________ /        \                 _____________*====|=====;_________X-axis
           C\.        \             \         \                                 /C               
             \_________\,,,,,,,,,,,,,\_________\                               /
        We know that perspective projection is frustum, so why not create a fitting (1st figure) shape to project in shadow mapping, It will Solve to 2 biggest problem of shadow mapping(without cutting on corners for each other),
        That are resolution and Speed (Which will be compromised even if I'm using multiple orthographic projection of varying sizes according to distance, beacause i'll be using multiple render PASSES)
        So for it i'll need free-mind which somwhat hard since in few days T1 of college's 4th sem will be held
        But After creating projection matrix how to proceed further, how are shadows even rendered.
    DIRECTIONAL Shadow Render Pass:
        Step 1- Creating framebuffer for directional shadow render pass, creating a new texture, use them to render world from sun's perspective(remember altough we are saying rendering from sun perspective, in our case sun will be determined by camera position,direction{we are not rendering entire world})
        Step 2- (Done before rendering world/using directional shadow pass) bind the created texture to framebuffer for being written to, setup framebuffer to write depth values to the binded Texture.
        Step 3- Apply Render pass.
        Step 4- In Main render pass, {All Inside Fragment Shader}use the sun projection matrix & check whether the point is inside area of opengl coordinate space(i.e was it inside when depth values were being written) if it is then we check the resultant depth(Z) value of resultant position(After multiplying with [sun's projection Matrix]*[view matrix from sun]*position),
            Campare it with depth value inside that xy position of texture created by directional shadow pass, if its camparable i.e then the point will have diffuse light applied to it otherwise the point is in shadow(only ambient Light)
    The MATRIX:
     sun 0       /\scene        View Matix: 
              /\/  \.
         ____/__\__/^\
 }
===
 Learn animation in Blender to understand different animation types
===
 + Rigged Animation System i.e Animated Model class
 + Normal Animation System i.e Animated Model class(if possible)
 + SkyBox
 + Collider class(Collision System)[Oriented bounding Box like]
 + RigidBody class(Physics System)[Hitbox type]

Polishing Features(Some features or Changes Outside preffered Workflow):
 - camera.RollBy(degree){ roll = -degree;//reverse dirn (Maybe, Not Implimented For Now)
      (rotation.x ,rotation.y, -degrees) = rotation;
   }
 - Cull opposite facing triangles[Optimize]
 - Mipmapping of textures[Optimize & Improve to Visuals]
 - Limit/dampen Efects By Distance(Like specular light)[Optimize]
 - Take out Mesh and texture From Model AND resolve mesh & texture duplication in memory{may increase speed}[Optimize]
 - Sort Mesh and texture in memory{For Nxt Step, Can be Lot Harder, However Creating Link List May Help then create new Scene with Stacked static data chunks i.e *Point 3. Optional Polish*}[Optimize]
 - Sorting Can be Done EveryWhere.
 - Models Loading Mesh and texture will somtimes be same so Sort and process them in sorted order(and since model and texture are the main datas, all models can push this information(from scene renderer) to Master Renderer where it will create tuple of mesh and texture and other necessary stuff,sort them by Mesh -> texture,fed the data to OpenGL)[Optimize]
 - Change Script Component(just single func/behavior per script comp){Break Scripts to awake and update scripts(inside Scene)[to add multiple scripts on whim instead of just 1 reset and update]}
 - Store initial(when initialising Scene) Posn and settings of different components inside a stock script Of type awake{It can work as saving scenes}
 - Generalize Scene update and render functions{you know why}
 - map mesh to shader(){to both give user freedom of writing own shaders and to facilitate scene render func}
 - Extract game loop and every stuff out main function, Run rendering,collision and every stuff you can on different thread
 - Build Render Class to handle post render stuff like UIs, anti-aliasing
 - Scene camera
 - you can add camera model to represent 3d posn in scene and a 2d sprite(shown on UI like in unity irresepective of distance from camera) for camera posn w.r.t scene camera
 - Debug mode for scene where you can fly through World to check what is where, with its exclusive features like wireframe of colliders, visual details of game objs etc[create new Type of script class(Called Debug/Gizmo Script) for handling every extra detail to show about game objects{also this script is directly handled by debug system of renderer}, also there will be some default debug scripts like for camera, collider etc].

Optional Polish:
 - Continuous Collision
 - Seprate Terrain System
 - Create intermidiate stage after init where a new Scene is created on heap where everything is located in contineuous format(not in std::vector but array i.e contineous data blocks) then wipe the temp scene wherever possible to free immidiate cache.
   `*=> it can also slow down(since everything on RAM) so optimize that too. 😁

NOTE: this a stepping stone(that is i'm proud of) for understanding HAZEL/(General ECS based Engines) to core AND for Resume, So good luck to myself, focusing on gathering Knowledge not lazing around 👍